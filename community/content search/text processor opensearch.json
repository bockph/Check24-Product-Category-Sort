//Add trusted endpoints to the cluster settings, TODO add Azure
PUT /_cluster/settings
{
    "persistent": {
        "plugins.ml_commons.trusted_connector_endpoints_regex": [
          "^https://api\\.openai\\.com/.*$",
          "^https://openai\\.azure\\.com/.*$",
          "^https://checkgpt\\.openai\\.azure\\.com/.*$"
        ]
    }
}

//2. Create Machine Learning Modelgroup
 POST /_plugins/_ml/model_groups/_register

{
  "name": "remote_model_group",
  "description": "A model group for external models"
}


//3. Create OpenAI Connector
 POST /_plugins/_ml/connectors/_create
{
        "name": "OpenAI Embedding Connector",
        "description": "The connector to public OpenAI model service for Ada Embedding",
        "version": 1,
        "protocol": "http",
        "parameters": {
            "endpoint": "api.openai.com",
            "model": "text-embedding-ada-002"
        },
        "credential": {
            "openAI_key": "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"
        },
        "actions": [
            {
                "action_type": "predict",
                "method": "POST",
                "url": "https://${parameters.endpoint}/v1/embeddings",
                "headers": {
                    "Authorization": "Bearer ${credential.openAI_key}"
                },
                "request_body": "{ \"model\": \"${parameters.model}\", \"input\": ${parameters.messages}, \"encoding_format\":\"float\"}"
            }
        ]
    }

//4. Register Model based on OpenAI Connector
// POST /_plugins/_ml/models/_register
{
        "name": "Azure Embedding Text Processor",
        "description": "The text processor for public OpenAI model service for Ada Embedding",
        "model_group_id": "<previously retrieved modelgroupid>",
        "connector_id": "<previously retrieved connectorid>",
        "function_name":"remote"
    }

//5. Deploy Model
// POST /_plugins/_ml/models/<previously retrieved modelid>/_deploy

//6. OPTIONAL test model --> expected Answer should return inference_results
// POST /_plugins/_ml/models/<previously retrieved modelid>/_predict
{
  "parameters": {
    "messages": [
      "test"
    ]
  }
}

//CREATE INGEESTION PIPELINE
// 1. Adapt Model ID & passage_text & pipeline Name
PUT /_ingest/pipeline/azure_content_embedding
{
  "description": "Azure Content only pipeline for embedding",
  "processors": [
    {
      "text_embedding": {
        "model_id": "<previously retrieved modelid>",
        "field_map": {
          "content": "content_embedding"

        }
      }
    }

  ]
}
//Create Index
PUT /embedding-pipeline-index
//read all stopwords from file into variable --> german_stopwords
    index_body = {
        "settings": {
            "index": {
                "knn": True,
                "default_pipeline": "azure_content_embedding",
                "number_of_shards": 1,
                "number_of_replicas": 1,
                "analysis": {
                    "filter": {
                        "german_stop": {
                            "type": "stop",
                            "stopwords": german_stopwords
                        },
                        "german_stemmer": {
                            "type": "stemmer",
                            "language": "light_german"
                        }
                    },
                    "analyzer": {
                        "rebuilt_german": {
                            "tokenizer": "standard",
                            "filter": [
                                "lowercase",
                                'asciifolding',
                                "german_stop",
                                "german_normalization",
                                "german_stemmer"
                            ]
                        }
                    }
                }
            }
        },
        "mappings": {
            "properties": {
                "content_type": {
                    "type": "keyword"
                },
                "last_indexed_at": {
                    "type": "date",
                    "format": "yyyy-MM-dd'T'HH:mm:ss"
                },
                "post_id": {
                    "type": "integer"
                },
                "comment_id": {
                    "type": "integer"
                },
                "group_id": {
                    "type": "integer"
                },
                "content": {
                    "type": "text",
                },
                "content_clean": {
                    "type": "text",
                    "analyzer": "rebuilt_german"
                },
                "context": {
                    "type": "text",
                },
                "created_at": {
                    "type": "date",
                    "format": 'yyyy-MM-dd HH:mm:ss'
                },
                "reaction_count": {
                    "type": "integer"
                },
                "comment_count": {
                    "type": "integer"
                },
                "view_count": {
                    "type": "integer"
                },
                "is_question": {
                    "type": "boolean"
                },
                "external_source_type": {
                    "type": "keyword"
                },
                "content_embedding": {
                    "type": "knn_vector",
                    "dimension": 1536,
                    "method": {
                        "engine": "nmslib",
                        "space_type": "cosinesimil",
                        "name": "hnsw",
                        "parameters": {}
                    }
                }
            }
        }
    }


