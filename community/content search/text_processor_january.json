PUT /_cluster/settings
{
    "persistent": {
        "plugins.ml_commons.trusted_connector_endpoints_regex": [
          "^https://api\\.openai\\.com/.*$",
          "^https://openai\\.azure\\.com/.*$",
          "^https://checkgpt\\.openai\\.azure\\.com/.*$"
        ]
    }
}

POST /_plugins/_ml/model_groups/_register
{
  "name": "remote_model_group",
  "description": "A model group for external models"
}

POST /_plugins/_ml/models/aiIMiYwBE74QSR7tVzfQ/_undeploy
DELETE /_plugins/_ml/models/aiIMiYwBE74QSR7tVzfQ
DELETE /_plugins/_ml/connectors/aCIMiYwBE74QSR7tOje4



POST /_plugins/_ml/connectors/_create
{
        "name": "OpenAI Embedding Connector",
        "description": "The connector to public OpenAI model service for Ada Embedding",
        "version": 1,
        "protocol": "http",
        "parameters": {
            "endpoint": "api.openai.com",
            "auth": "API_Key",
            "model": "text-embedding-ada-002",
                "content_type": "application/json"

        },
        "credential": {
            "openAI_key": "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"
        },
        "actions": [
            {
                "action_type": "predict",
                "method": "POST",
                "url": "https://${parameters.endpoint}/v1/embeddings",
                "headers": {
                    "Authorization": "Bearer ${credential.openAI_key}"
                },
                "request_body": "{ \"model\": \"${parameters.model}\", \"input\": ${parameters.input}, \"encoding_format\":\"float\"}",
                                "pre_process_function": "connector.pre_process.openai.embedding",

                "post_process_function": "connector.post_process.openai.embedding"
            }
        ]
    }




POST /_plugins/_ml/connectors/_create
{
        "name": "Azure Embedding Connector",
        "description": "The connector to public Azur openai model service for Ada Embedding",
        "version": 1,
        "protocol": "http",
        "parameters": {
            "endpoint": "checkgpt.openai.azure.com",
            "auth": "API_Key",
                "content_type": "application/json"

        },
        "credential": {
            "api-key": "5161a6aa2c904b6abefc0d58fe03583b"
        },
        "actions": [
            {
                "method": "POST",
                "action_type": "predict",

                "url":"https://checkgpt.openai.azure.com/openai/deployments/c24_embedding/embeddings?api-version=2023-05-15",

                "headers": {
                    "api-key": "5161a6aa2c904b6abefc0d58fe03583b",
                                    "Content-Type": "application/json"

                },
                "request_body": "{\"input\": ${parameters.input}, \"encoding_format\":\"float\"}",
                                "pre_process_function": "connector.pre_process.openai.embedding",

                "post_process_function": "connector.post_process.openai.embedding"
            }
        ]
    }

POST /_plugins/_ml/models/_register
{
        "name": "Azure OpenAI Embedding Model",
        "description": "The text processor for public OpenAI model service for Ada Embedding",
        "model_group_id": "SSI3fYwBE74QSR7tkzeH",
        "connector_id": "-FwSy4wB9VlIElPjH7jz",
        "function_name":"remote"
    }


POST /_plugins/_ml/models/-lwSy4wB9VlIElPji7i1/_deploy

POST /_plugins/_ml/models/-lwSy4wB9VlIElPji7i1/_predict
{
  "parameters": {
    "input": [
      "tan"
    ]
  }
}




PUT /_ingest/pipeline/azure_double_embedding
{
  "description": "Azure Content and Context pipeline for embedding"
  "processors": [
    {
      "text_embedding": {
        "model_id": "_lxizowB9VlIElPjprjF",
        "field_map": {
          "content": "content_embedding",
          "context": "context_embedding"

        }
      }
    }
  ]
}
PUT /_ingest/pipeline/openai-context2embedding-pipeline
{
  "description": "Open AI text embedding pipeline for context field",
  "processors": [
    {
      "text_embedding": {
        "model_id": "-lwSy4wB9VlIElPji7i1",
        "field_map": {
          "context": "context_embedding"
        }
      }
    }
  ]
}











GET /content_search5/_search
{
  "_source": {
    "excludes": [
      "embedding"
    ]
  },
  "query": {
    "neural": {
      "embedding": {
        "query_text": "Flughafen Distanz",
        "model_id": "85vxi4wBAzj0BeMESmd9",
        "k": 100
      }
    }
  }

}




POST content_search_january/_update_by_query?pipeline=azure_double_embedding
{
  "query": {

        "bool": {
          "must_not": [
            {
              "exists": {
                "field": "embedding"
              }
            }
          ]


    }
  }

}

GET content_search5/_search
{
  "query": {
    "match": {
 "content":"bietet"
    }
  }
}
GET content_search/_search
{
  "query": {

        "bool": {
          "must_not": [
            {
              "exists": {
                "field": "embedding"
              }
            }
          ]


    }
  }
}

GET /content_search/_search
{
  "_source": {
    "excludes": [
      "embedding","context"
    ]
  },
  "query": {
    "bool": {
      "should": [
        {
          "script_score": {
            "query": {
              "neural": {
                "embedding": {
                  "query_text": "Flughafen Distanz",
                  "model_id": "85vxi4wBAzj0BeMESmd9",
                  "k": 100
                }
              }
            },
            "script": {
              "source": "_score * 1.5"
            }
          }
        },
        {
          "script_score": {
            "query": {
              "match": {
                "content": "sadfasgfsfdeqgasdf"
              }
            },
            "script": {
              "source": "_score * 1.0"
            }
          }
        }
      ]
    }
  }
}

PUT /_search/pipeline/normalization
{
  "description": "Post processor for hybrid search",
  "phase_results_processors": [
    {
      "normalization-processor": {
        "normalization": {
          "technique": "min_max"
        },
        "combination": {
          "technique": "arithmetic_mean"

        }
      }
    }
  ]
}


GET /content_search/_search?search_pipeline=normalization
{
  "_source": {
    "exclude": [
      "embedding","context"
    ]
  },
  "query": {
    "hybrid": {
      "queries": [
        {
          "match": {
            "content": {
              "query": "Flughafen"
            }
          }
        },
        {
          "neural": {
            "embedding": {
              "query_text": "Flughafen Distanz",
              "model_id": "85vxi4wBAzj0BeMESmd9",
              "k": 5
            }
          }
        }
      ]
    }
  }
}

PUT /content_search/_mapping
{
  "properties": {
    "context_embedding": {
      "type": "knn_vector",
                    "dimension": 1536,
                    "method": {
                        "engine": "nmslib",
                        "space_type": "cosinesimil",
                        "name": "hnsw",
                        "parameters": {}
                    }
    }
  }
}
POST content_search/_update_by_query?pipeline=openai-context2embedding-pipeline
{
  "query": {

        "bool": {
          "must_not": [
            {
              "exists": {
                "field": "context_embedding"
              }
            },
            {
          "term": {
            "context": ""
          }
        }
          ]



    }
  }

}